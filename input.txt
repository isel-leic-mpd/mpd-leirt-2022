package isel.leirt.mpd.streams;

import isel.leirt.mpd.streams.spliterators.CacheSpliterator;
import isel.leirt.mpd.streams.spliterators.SpliteratorReaderLines;
import isel.leirt.mpd.streams.spliterators.ZipSlipterator;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UncheckedIOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class StreamUtils {

    public static <T> Supplier<Stream<T>> cache(Stream<T> src) {
        Spliterator<T> srcIt = src.spliterator();
        List<T> buffer = new ArrayList<>();
        return () ->
             StreamSupport
                    .stream(new CacheSpliterator(srcIt, buffer ),false);

    }

    public static <T,U,V> Stream<V> zip(Stream<T> src1, Stream<U> src2,
                                           BiFunction<T,U,V> combiner) {
        return
            StreamSupport
                .stream(new ZipSlipterator<>(
                        src1.spliterator(),
                        src2.spliterator(),
                        combiner),false);

    }

    public static  Stream<String> lines(String textFileName) {
        Supplier<InputStream> input =
            () -> {
                try {
                    return new FileInputStream(textFileName);
                }
                catch(IOException e) {
                    throw new UncheckedIOException(e);
                }
            };
        return
            StreamSupport
                .stream(new SpliteratorReaderLines(input), false);
    }
}
